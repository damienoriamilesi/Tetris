// Generated by CoffeeScript 1.6.3
(function() {
  var canvas, checkItem, context, current, draw, drawElement, drawElementItem, getNewBlock, grid, gridMaxX, gridMaxY, move, moveDown, play, showGrid, templates, updateGrid;

  context = null;

  canvas = null;

  gridMaxX = 16;

  gridMaxY = 30;

  current = null;

  showGrid = 0;

  templates = [
    {
      color: "red",
      name: "cube",
      path: [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 0,
          y: 1
        }, {
          x: 1,
          y: 1
        }
      ]
    }, {
      color: "yellow",
      name: "line",
      path: [
        {
          x: 0,
          y: 0
        }, {
          x: 0,
          y: 1
        }, {
          x: 0,
          y: 2
        }, {
          x: 0,
          y: 3
        }
      ]
    }, {
      color: "blue",
      name: "L",
      path: [
        {
          x: 0,
          y: 0
        }, {
          x: 0,
          y: 1
        }, {
          x: 0,
          y: 2
        }, {
          x: 1,
          y: 2
        }
      ]
    }, {
      color: "pink",
      name: "otherL",
      path: [
        {
          x: 0,
          y: 0
        }, {
          x: 0,
          y: 1
        }, {
          x: 0,
          y: 2
        }, {
          x: -1,
          y: 2
        }
      ]
    }, {
      color: "grey",
      name: "S",
      path: [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 1,
          y: 1
        }, {
          x: 2,
          y: 1
        }
      ]
    }, {
      color: "black",
      name: "otherS",
      path: [
        {
          x: 0,
          y: 0
        }, {
          x: -1,
          y: 0
        }, {
          x: -1,
          y: 1
        }, {
          x: -2,
          y: 1
        }
      ]
    }, {
      color: "orange",
      name: "T",
      path: [
        {
          x: 0,
          y: 0
        }, {
          x: 1,
          y: 0
        }, {
          x: 0,
          y: 1
        }, {
          x: 0,
          y: -1
        }
      ]
    }
  ];

  grid = {
    occuped: [],
    drawColumn: function() {
      var i, _i, _j, _results;
      if (showGrid === 1) {
        context.beginPath();
        for (i = _i = 0; _i <= gridMaxX; i = _i += 1) {
          context.moveTo(i * 15, 0);
          context.lineTo(i * 15, gridMaxY * 15);
          context.stroke();
        }
        _results = [];
        for (i = _j = 0; _j <= gridMaxY; i = _j += 1) {
          context.moveTo(0, i * 15);
          context.lineTo(gridMaxX * 15, i * 15);
          _results.push(context.stroke());
        }
        return _results;
      }
    }
  };

  getNewBlock = function() {
    var template;
    template = Math.floor(Math.random() * 6);
    console.log(template);
    current = {
      x: gridMaxX / 2,
      y: -1,
      template: templates[template]
    };
  };

  window.onload = function() {
    canvas = document.createElement('canvas');
    canvas.width = gridMaxX * 15;
    canvas.height = gridMaxY * 15;
    canvas.style.backgroundColor = "yellowgreen";
    document.body.appendChild(canvas);
    context = canvas.getContext('2d');
    getNewBlock();
    return setInterval(play, 100);
  };

  draw = function() {
    var element, _i, _len, _ref;
    context.clearRect(0, 0, canvas.width, canvas.height);
    grid.drawColumn();
    drawElement(current);
    _ref = grid.occuped;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      element = _ref[_i];
      drawElement(element);
    }
  };

  drawElement = function(element) {
    var item, _i, _len, _ref;
    if ((element.x != null) && (element.y != null)) {
      if (element.color != null) {
        drawElementItem(element.x, element.y, element.color);
      }
      if ((element.template != null) && (element.template.path != null)) {
        _ref = element.template.path;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          drawElementItem(element.x + item.x, element.y + item.y, element.template.color);
        }
      }
    }
  };

  drawElementItem = function(x, y, color) {
    context.beginPath();
    context.rect((x * 15) + 1, (y * 15) + 1, 13, 13);
    context.fillStyle = color;
    return context.fill();
  };

  play = function() {
    moveDown(current);
    draw();
  };

  updateGrid = function(element) {
    var currentLine, dummy, item, liste, state, _i, _j, _k, _len, _len1, _ref, _ref1,
      _this = this;
    _ref = element.template.path;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      grid.occuped.push({
        x: element.x + item.x,
        y: element.y + item.y,
        color: element.template.color
      });
    }
    for (currentLine = _j = 0; 0 <= gridMaxY ? _j <= gridMaxY : _j >= gridMaxY; currentLine = 0 <= gridMaxY ? ++_j : --_j) {
      dummy = 'I am useless but my poor developper still doesn\'t know how to do it better way';
      liste = (function() {
        var _k, _len1, _ref1, _results;
        _ref1 = grid.occuped;
        _results = [];
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          state = _ref1[_k];
          if (currentLine === state.y) {
            _results.push(dummy);
          }
        }
        return _results;
      })();
      if (liste.length === gridMaxX) {
        grid.occuped = grid.occuped.filter(function(item) {
          return item.y !== currentLine;
        });
        _ref1 = grid.occuped;
        for (_k = 0, _len1 = _ref1.length; _k < _len1; _k++) {
          item = _ref1[_k];
          if (item.y < currentLine) {
            (function() {
              return item.y += 1;
            })();
          }
        }
      }
    }
    console.log(fullLines.length);
  };

  moveDown = function(element) {
    var canMove;
    canMove = move(element, 0, 1);
    if (!canMove) {
      updateGrid(current);
      return getNewBlock();
    }
  };

  checkItem = function(x, y) {
    var dummy, list, state;
    dummy = 'I am useless but my poor developper doesn\'t know how to do it better way';
    if (y < gridMaxY && x >= 0 && x < gridMaxX) {
      list = (function() {
        var _i, _len, _ref, _results;
        _ref = grid.occuped;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          state = _ref[_i];
          if (x === state.x && y === state.y) {
            _results.push(dummy);
          }
        }
        return _results;
      })();
      if (list.length === 0) {
        return true;
      }
    }
    return false;
  };

  move = function(element, x, y) {
    var canMove, item, _fn, _i, _len, _ref,
      _this = this;
    canMove = true;
    _ref = element.template.path;
    _fn = function() {
      if (!checkItem(element.x + item.x + x, element.y + item.y + y)) {
        canMove = false;
      }
    };
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      item = _ref[_i];
      _fn();
    }
    if (canMove) {
      current.x += x;
      current.y += y;
    }
    return canMove;
  };

  document.onkeydown = function(t) {
    if (t.keyCode === 37) {
      move(current, -1, 0);
    }
    if (t.keyCode === 39) {
      move(current, 1, 0);
    }
    if (t.keyCode === 40) {
      move(current, 0, 1);
    }
    if (t.keyCode === 32) {
      rotate(current);
    }
  };

}).call(this);
